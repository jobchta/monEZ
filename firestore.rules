rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Expenses collection - users can only access their own expenses
    match /expenses/{expenseId} {
      allow read, write: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // User-specific expenses subcollection pattern
    match /users/{userId}/expenses/{expenseId} {
      allow read, write: if isOwner(userId);
      allow create: if isOwner(userId) && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // Friends collection - users can only access their own friends list
    match /friends/{friendId} {
      allow read, write: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // User-specific friends subcollection pattern
    match /users/{userId}/friends/{friendId} {
      allow read, write: if isOwner(userId);
      allow create: if isOwner(userId);
    }
    
    // Preferences collection - users can only access their own preferences
    match /preferences/{preferenceId} {
      allow read, write: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // User-specific preferences subcollection pattern
    match /users/{userId}/preferences/{preferenceId} {
      allow read, write: if isOwner(userId);
      allow create: if isOwner(userId);
    }
    
    // Users collection - users can read and write only their own user document
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Nested subcollections inherit the parent's userId for security
      match /{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Block all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
